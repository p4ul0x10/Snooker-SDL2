void loadMesa(SDL_Renderer *renderer)
{
	SDL_Surface *image_mesa = IMG_Load("assets/images/mesa-edt.png");

	SDL_Texture *texture_mesa = SDL_CreateTextureFromSurface(renderer, image_mesa);
	SDL_FreeSurface(image_mesa);

	SDL_Rect image_mesa_rect;
	image_mesa_rect.w = 900;
	image_mesa_rect.h = 540;
	image_mesa_rect.x = 0;
	image_mesa_rect.y = 0;
	SDL_RenderCopy(renderer, texture_mesa, NULL, &image_mesa_rect);
    SDL_DestroyTexture(texture_mesa);
}

void loadTriangulo(SDL_Renderer *rendTri, bool status_tri){

	int vetN[15], vetX[15], vetY[15], vetP[7], vetI[8], vB;
	//start triangulo inicial
    SDL_Surface *triImg = IMG_Load("assets/images/b1.jpeg");
	SDL_Texture *texture_b = SDL_CreateTextureFromSurface(rendTri, triImg);
	SDL_FreeSurface(triImg);
	SDL_Rect triImg_rect;
	triImg_rect.w = 20;
	triImg_rect.h = 20;
	triImg_rect.y = 217.5;
	triImg_rect.x = 700;
	//end triangulo inicial
    if(status_tri == false){

		for(vB = 0; vB < 15; vB++){

			vetN[vB] = vB; //vetor numero total bolas
			if(vB == 0){
				SDL_Surface *triImg = IMG_Load("assets/images/b1.png");
				SDL_Texture *texture_b = SDL_CreateTextureFromSurface(rendTri, triImg);
				SDL_FreeSurface(triImg);
				SDL_RenderCopy(rendTri, texture_b, NULL, &triImg_rect);
				SDL_DestroyTexture(texture_b);
				vetX[vB] = triImg_rect.x; //vetor x pos
				vetY[vB] = triImg_rect.y; //vetor y pos
				vetI[vB] = vB+1; //vetor bolas impar
			}else if(vB > 0 && vB < 3){

				if(vB == 1){

					triImg_rect.y = 207.5;
					triImg_rect.x += 17.5;
					SDL_Surface *image_b2 = IMG_Load("assets/images/b2.png");
					SDL_Texture *texture_b2 = SDL_CreateTextureFromSurface(rendTri, image_b2);
					SDL_FreeSurface(image_b2);
					SDL_RenderCopy(rendTri, texture_b2, NULL, &triImg_rect);
					SDL_DestroyTexture(texture_b2);
					vetX[vB] = triImg_rect.x; //vetor x pos
					vetY[vB] = triImg_rect.y; //vetor y pos
					vetP[vB] = vB+1; //vetor bolas par
				}else if(vB == 2){

					triImg_rect.y = 227.5;
					SDL_Surface *image_b3 = IMG_Load("assets/images/b3.png");
					SDL_Texture *texture_b3 = SDL_CreateTextureFromSurface(rendTri, image_b3);
					SDL_FreeSurface(image_b3);
					SDL_RenderCopy(rendTri, texture_b3, NULL, &triImg_rect);
					SDL_DestroyTexture(texture_b3);
					vetX[vB] = triImg_rect.x; //vetor x pos
					vetY[vB] = triImg_rect.y; //vetor y pos
					vetI[vB] = vB+1; //vetor bolas impar
				}

			}else if(vB > 2 && vB <= 5){

				if(vB == 3){

					triImg_rect.y = 197.5;
					triImg_rect.x += 17.5;
					SDL_Surface *image_b4 = IMG_Load("assets/images/b4.png");
					SDL_Texture *texture_b4 = SDL_CreateTextureFromSurface(rendTri, image_b4);
					SDL_FreeSurface(image_b4);
					SDL_RenderCopy(rendTri, texture_b4, NULL, &triImg_rect);
                    SDL_DestroyTexture(texture_b4);
					vetX[vB] = triImg_rect.x; //vetor x pos
					vetY[vB] = triImg_rect.y; //vetor y pos
					vetP[vB] = vB+1; //vetor bolas par
				}else if(vB == 4){

					triImg_rect.y = 217.5;
					SDL_Surface *image_b5 = IMG_Load("assets/images/b5.png");
					SDL_Texture *texture_b5 = SDL_CreateTextureFromSurface(rendTri, image_b5);
					SDL_FreeSurface(image_b5);
					SDL_RenderCopy(rendTri, texture_b5, NULL, &triImg_rect);
					SDL_DestroyTexture(texture_b5);
					vetX[vB] = triImg_rect.x; //vetor x pos
					vetY[vB] = triImg_rect.y; //vetor y pos
					vetI[vB] = vB+1; //vetor bolas impar
				}else if(vB == 5){

					triImg_rect.y = 237.5;
					SDL_Surface *image_b6 = IMG_Load("assets/images/b6.png");
					SDL_Texture *texture_b6 = SDL_CreateTextureFromSurface(rendTri, image_b6);
					SDL_FreeSurface(image_b6);
					SDL_RenderCopy(rendTri, texture_b6, NULL, &triImg_rect);
					SDL_DestroyTexture(texture_b6);
					vetX[vB] = triImg_rect.x; //vetor x pos
					vetY[vB] = triImg_rect.y; //vetor y pos
					vetP[vB] = vB+1; //vetor bolas par
				}

			}else if(vB > 5 && vB < 10){

				if(vB == 6){

					triImg_rect.y = 187.5;
					triImg_rect.x += 17.5;
					SDL_Surface *image_b7 = IMG_Load("assets/images/b7.png");
					SDL_Texture *texture_b7 = SDL_CreateTextureFromSurface(rendTri, image_b7);
					SDL_FreeSurface(image_b7);
					SDL_RenderCopy(rendTri, texture_b7, NULL, &triImg_rect);
					SDL_DestroyTexture(texture_b7);
					vetX[vB] = triImg_rect.x; //vetor x pos
					vetY[vB] = triImg_rect.y; //vetor y pos
					vetI[vB] = vB+1; //vetor bolas impar
				}else if(vB == 7){
					triImg_rect.y = 207.5;
					SDL_Surface *image_b8 = IMG_Load("assets/images/b8.png");
					SDL_Texture *texture_b8 = SDL_CreateTextureFromSurface(rendTri, image_b8);
					SDL_FreeSurface(image_b8);
					SDL_RenderCopy(rendTri, texture_b8, NULL, &triImg_rect);
					SDL_DestroyTexture(texture_b8);
					vetX[vB] = triImg_rect.x; //vetor x pos
					vetY[vB] = triImg_rect.y; //vetor y pos
					vetP[vB] = vB+1; //vetor bolas par
				}else if(vB == 8){
					triImg_rect.y = 227.5;
					SDL_Surface *image_b9 = IMG_Load("assets/images/b9.png");
					SDL_Texture *texture_b9 = SDL_CreateTextureFromSurface(rendTri, image_b9);
					SDL_FreeSurface(image_b9);
					SDL_RenderCopy(rendTri, texture_b9, NULL, &triImg_rect);
					SDL_DestroyTexture(texture_b9);
					vetX[vB] = triImg_rect.x; //vetor x pos
					vetY[vB] = triImg_rect.y; //vetor y pos
					vetI[vB] = vB+1; //vetor bolas impar
				}else if(vB == 9){
					triImg_rect.y = 247.5;
					SDL_Surface *image_b10 = IMG_Load("assets/images/b10.png");
					SDL_Texture *texture_b10 = SDL_CreateTextureFromSurface(rendTri, image_b10);
					SDL_FreeSurface(image_b10);
					SDL_RenderCopy(rendTri, texture_b10, NULL, &triImg_rect);
					SDL_DestroyTexture(texture_b10);
					vetX[vB] = triImg_rect.x; //vetor x pos
					vetY[vB] = triImg_rect.y; //vetor y pos
					vetP[vB] = vB+1; //vetor bolas par
				}

			}else{

				if(vB == 10){
					triImg_rect.y = 177.5;
					triImg_rect.x += 17.5;
					SDL_Surface *image_b11 = IMG_Load("assets/images/b11.png");
					SDL_Texture *texture_b11 = SDL_CreateTextureFromSurface(rendTri, image_b11);
					SDL_FreeSurface(image_b11);
					SDL_RenderCopy(rendTri, texture_b11, NULL, &triImg_rect);
					SDL_DestroyTexture(texture_b11);
					vetX[vB] = triImg_rect.x; //vetor x pos
					vetY[vB] = triImg_rect.y; //vetor y pos
					vetI[vB] = vB+1; //vetor bolas impar
				}else if(vB == 11){
					triImg_rect.y = 197.5;
					SDL_Surface *image_b12 = IMG_Load("assets/images/b12.png");
					SDL_Texture *texture_b12 = SDL_CreateTextureFromSurface(rendTri, image_b12);
					SDL_FreeSurface(image_b12);
					SDL_RenderCopy(rendTri, texture_b12, NULL, &triImg_rect);
					SDL_DestroyTexture(texture_b12);
					vetX[vB] = triImg_rect.x; //vetor x pos
					vetY[vB] = triImg_rect.y; //vetor y pos
					vetP[vB] = vB+1; //vetor bolas par
				}else if(vB == 12){
					triImg_rect.y = 217.5;
					SDL_Surface *image_b13 = IMG_Load("assets/images/b13.png");
					SDL_Texture *texture_b13 = SDL_CreateTextureFromSurface(rendTri, image_b13);
					SDL_FreeSurface(image_b13);
					SDL_RenderCopy(rendTri, texture_b13, NULL, &triImg_rect);
					SDL_DestroyTexture(texture_b13);
					vetX[vB] = triImg_rect.x; //vetor x pos
					vetY[vB] = triImg_rect.y; //vetor y pos
					vetI[vB] = vB+1; //vetor bolas impar
				}else if(vB == 13){
					triImg_rect.y = 237.5;
					SDL_Surface *image_b14 = IMG_Load("assets/images/b14.png");
					SDL_Texture *texture_b14 = SDL_CreateTextureFromSurface(rendTri, image_b14);
					SDL_FreeSurface(image_b14);
					SDL_RenderCopy(rendTri, texture_b14, NULL, &triImg_rect);
					SDL_DestroyTexture(texture_b14);
					vetX[vB] = triImg_rect.x; //vetor x pos
					vetY[vB] = triImg_rect.y; //vetor y pos
					vetP[vB] = vB+1; //vetor bolas par
				}else if(vB == 14){
					triImg_rect.y = 257.5;
					SDL_Surface *image_b15 = IMG_Load("assets/images/b15.png");
					SDL_Texture *texture_b15 = SDL_CreateTextureFromSurface(rendTri, image_b15);
					SDL_FreeSurface(image_b15);
					SDL_RenderCopy(rendTri, texture_b15, NULL, &triImg_rect);
					SDL_DestroyTexture(texture_b15);
					vetX[vB] = triImg_rect.x; //vetor x pos
					vetY[vB] = triImg_rect.y; //vetor y pos
					vetI[vB] = vB+1; //vetor bolas impar
				}
			}
		}
	}
}

void bolaBranca(SDL_Renderer *renderer, float x, float y)
{
	SDL_Surface *image_branca = IMG_Load("assets/images/bm.png");

	SDL_Texture *texture_branca = SDL_CreateTextureFromSurface(renderer, image_branca);
	SDL_FreeSurface(image_branca);


	SDL_Rect image_branca_rect;
	image_branca_rect.w = 20;
	image_branca_rect.h = 20;
	image_branca_rect.x = x;
	image_branca_rect.y = y;

	SDL_RenderCopy(renderer, texture_branca, NULL, &image_branca_rect);
	SDL_DestroyTexture(texture_branca);
}

void rendTaco(SDL_Renderer *rendT, int x, int y, float deg, float deg_mode, float df_x, float df_y, float ang_x, float by, float bx){

    SDL_Surface *image_taco = IMG_Load("assets/images/taco.png");
	SDL_Texture *texture_taco = SDL_CreateTextureFromSurface(rendT, image_taco);
	SDL_FreeSurface(image_taco);

    int cont_px = 0, cont_px_aux = 0, inc_deg, p_x_cont = 0;
    int px = 0, block_px = 0, divALInt, divDf, mode_inc;
    float incPx, divAL, divLA, auxpx, deg_type = 0, deg_limit = 0, resize_x, resize_y, p_x, p_y, inc_x, add_deg, mode_px, total_deg, div_angulo;
    bool stop_px = false, run_deg = true;
    //centro 200 df = 10 m = 210 -> 200

	divLA = df_x / df_y; //largura / altura
	divAL = df_y / df_x; //altura / largura
	divALInt = df_y / df_x; //alt / larg int
	incPx = df_y / divAL; //altura / divAL
	divDf = df_y - df_x; //altura - largura

    resize_x = x + 20; //ajusta pos x direita
    resize_y = round(y+10); //ajusta pox y topo
    p_x = bx;
    p_y = by;
    SDL_SetRenderDrawColor(rendT, 0, 0, 0, 1);
	if (divALInt % 2 != 0 && divAL != 1 && divAL >= 1)
	{
		auxpx = divAL / df_y;
		auxpx *= divDf;
		auxpx *= incPx;
		incPx += auxpx;
	}
    //start init calc limit deg
	while (stop_px == false)
	{
        if (divAL >= 1 && divAL <= 2)
		{
			if (divALInt % 2 != 0)
			{
				if (px > 1 && px % divALInt == 0)
				{
                    if(deg_mode == -90 || deg_mode == 0){
                        bx += divLA;
                        inc_x = divLA;
                    }else if(deg_mode == 180 || deg_mode == 90){
                        bx -= divLA;
                        inc_x = divLA;
                    }

				}

                if(deg_mode == -90 || deg_mode == 180){
                    by -= divALInt;
                    mode_inc = divALInt;
                }else if(deg_mode == 90 || deg_mode == 0){
                    by += divALInt;
                    mode_inc = divALInt;
                }

			}
			else
			{
				if (px > 1 && px % divALInt == 0) //start if run px addeds > 1
				{
                   if(deg_mode == -90 || deg_mode == 0){
                        bx += divLA;
                        inc_x = divLA;
                    }else if(deg_mode == 180 || deg_mode == 90){
                        bx -= divLA;
                        inc_x = divLA;
                    }
				} //end if run px addeds > 1

                if(deg_mode == -90 || deg_mode == 180){
                    by -= divAL;
                    mode_inc = divAL;
                }else if(deg_mode == 90 || deg_mode == 0){
                    by += divAL;
                    mode_inc = divAL;
                }
			}
		}
		else
		{

             if(divLA >= 1){ //div largura / altura >= 1 by -> divAL && bx +=1
                //start Sets by bx adds
                if(deg_mode == -90 || deg_mode == 180){
                    by -= divAL;
                    mode_inc = divAL;
                }else if(deg_mode == 90 || deg_mode == 0){
                    by += divAL;
                    mode_inc = divAL;
                }

                if(px > 1){ //start sets px > 1
                    if(deg_mode == 90 || deg_mode == 180){
                        bx -= 1;
                        inc_x = 1;
                    }else if(deg_mode == -90 || deg_mode == 0){
                        bx += 1;
                        inc_x = 1;
                    }
                    //end sets px > 1
                }//end if px addeds > 1

            }else { //div largura / altura < 1 by -> +=1 && bx divLA

                //start sets by bx divla < 1
                if(deg_mode == -90 || deg_mode == 180){
                    by -= 1;
                    mode_inc = 1;
                }else if(deg_mode == 90 || deg_mode == 0){
                    by += 1;
                    mode_inc = 1;
                }
                if(px > 1){
                    if(deg_mode == 90 || deg_mode == 180){
                        bx -= divLA;
                        inc_x = divLA;
                    }else if(deg_mode == -90 || deg_mode == 0){
                        bx += divLA;
                        inc_x = divLA;
                    }
                }
                //end sets by bc divla < 1
            }
		}


        SDL_Rect pxxx_rect;
		pxxx_rect.w = 1;
		pxxx_rect.h = 1;
		pxxx_rect.x = bx;
		pxxx_rect.y = by;

        SDL_RenderDrawRect(rendT, &pxxx_rect);
        SDL_RenderFillRect(rendT, &pxxx_rect);

		p_x_cont++;
		px += 1;

        //start init 360 graus in 45 ~ 45 -> 90
		if(deg_mode == -90){ //deg init -90 ~ 180

            if(bx >= resize_x && by >= y && stop_px == false){ //45 <=
                stop_px = true; //pause if
                deg_type = 45;
                if(by > y){
                    mode_px -= mode_inc;
                }
                 mode_px = round(by);
            }else if(bx <= resize_x && by <= y && stop_px == false){ //45 >
                stop_px = true; //pause if
                deg_type = 90;
                if(bx < resize_x){
                    mode_px += inc_x;
                }
                 mode_px = round(bx);
            }

        }else if(deg_mode == 180){ //deg init 180 ~ 90

            if(by <= y && bx >= x && stop_px == false){ //45 <=
                stop_px = true; //pause if
                deg_type = 225;
                resize_x = x + 10;
                if(bx > x){
                    mode_px -= inc_x;
                }
                 mode_px = round(bx);
            }else if(by >= y && bx <= x && stop_px == false){ //45 >
                stop_px = true; //pause if
                deg_type = 270;
                if(by > y){

                    by -= mode_inc;
                }
                mode_px = round(by);
                resize_y = round(y);
            }

        }else if(deg_mode == 90){ //deg init 90 ~ 0
            stop_px = false;
            resize_y = round(y) + 20;
            if(bx <= x && by <= resize_y && stop_px == false){ //45 <=
                stop_px = true; //pause if
                deg_type = 45;
                mode_px = round(by);

            }else if(bx >= x && by >= resize_y && stop_px == false){ //45 >

                stop_px = true; //pause if
                deg_type = 0;
                resize_x = x;
                mode_px = bx;
            }

        }else if(deg_mode == 0){ //deg init 0 ~ -90
            stop_px = false;
            resize_y = round(y) + 20;
            resize_x = round(x) + 20;
            if(bx <= resize_x && by >= resize_y && stop_px == false){ //45 <=
                stop_px = true;
                deg_type = -45;
                if(bx > resize_x){
                    bx -= inc_x;
                }
                mode_px = bx;
            }else if(bx >= resize_x && by <= resize_y && stop_px == false){ //45 >
                stop_px = true;
                deg_type = -90;
                mode_px = round(by);
            }

        }
        //end init 360 graus

	}
    //end calc limit deg <= 90 graus por mode deg

    if(deg_mode == -90){

        //start div taco / 2 && bola / 2 -> meio
        x = x - 400 / 2; //taco / 2
        x = x + 17 / 2; //bola / 2
        y = y - 400 / 2; //taco / 2
        y = y + 20 / 2; //bola / 2
        y = y + 1;
        x = x - 10;
        if(deg_type == 45){ //0 a 45 graus

            deg_limit = resize_y - mode_px; //diferencia ate centro bola y
            total_deg = 4.5*deg_limit; //total do angulo de inclinação pra -90
            add_deg = 90+total_deg; //total inclinacao
            div_angulo = total_deg / 4.5; //porcentagem relativa ao tamanho da bola

            if(deg_limit <= 10){
                //deg < 45 graus
                y = y + 10*deg_limit;
                y = y + total_deg;
                if(div_angulo > 2){
                    x = x + total_deg;
                    x = x - 10;
                    x = x + div_angulo;
                    x = x - 10;
                }

                if(div_angulo > 2){
                    x=x+10;
                }
                if(div_angulo >= 2 && div_angulo <= 5){
                    x=x-2;
                }
                if(div_angulo >= 7){
                    x = x + 10;
                    if(div_angulo >= 7 && div_angulo <= 8){
                    x = x - 10;
                    }
                    if(div_angulo > 7 && div_angulo <= 8){
                        x = x+ 4.5;
                    }
                }
                y = y + div_angulo;
                y = y + 1;
                if(div_angulo >=8){
                    y = y - 2;
                }
                if(div_angulo > 9){
                    y = y - 4.5;
                    x = x + 4;
                }
                deg = -add_deg;
            }


        }else if(deg_type == 90){ //45 graus++

            float df_45;
            df_45 = round(resize_x) - round(mode_px);
            deg_limit = resize_x - mode_px;
            deg_limit = deg_limit + 10;
            total_deg = 4.5*deg_limit;
            div_angulo = total_deg / 4.5;
            add_deg = 90+total_deg;

            if(deg_limit < 16){
                if(deg_limit >= 10){
                deg_limit = 10;
                }

                if(deg_limit > 11){
                    y = y + 10*deg_limit+total_deg;
                }else{
                     y = y + 10*deg_limit+total_deg;
                     y = y - 4;
                }

            }else{
                 y = y + 10*15+4.5*10;

            }

            x = x + 10*df_45+ total_deg;
            x = x + 10;
            //y = y - 4.5;

            if(deg_limit < 15){
                y = y + 10;
                y = y + 4.5*df_45;
            }else{

                x = x + df_45 -1;
                y = y + 10;
                if(deg_limit > 15 && deg_limit < 18){
                    y = y - 4;
                }
            }
            if(deg_limit >= 17 && deg_limit != 20){
                y = y + 2;
            }else if(deg_limit > 19){
                y = y + 2;

            }

            deg = -add_deg;

        }

    }else if(deg_mode == 180){

        x = x + 17 / 2; //bola / 2
        y = y + 20 / 2; //bola / 2
        y = y + 10;
        if(deg_type == 225){

            deg_limit = resize_x - mode_px;

            total_deg = 4.5*deg_limit;
            add_deg = 180-total_deg;
            div_angulo = total_deg / 4.5;
            if(deg_limit < 3){
                x = x + 4.5*deg_limit;
                x = x + 10*deg_limit;
                x = x + div_angulo+2;
                y = y - div_angulo;
            }else{
                x = x + 4.5*deg_limit;
                x = x + 10*deg_limit;
                x = x + div_angulo+1;

            }

            if(deg_limit > 2){
                y = y + 10;

                y = y - 4.5*deg_limit;
                y = y - deg_limit;
                if(deg_limit > 7){
                    y = y - 10;
                }
            }

            if(deg_limit > 9){
                x = x - 4;
                y = y - 4;
            }

            deg = add_deg;

        }else if(deg_type == 270){

            float df_45;
            df_45 = mode_px - resize_y;
            deg_limit = mode_px - resize_y;
            deg_limit = deg_limit + 10;
            total_deg = 4.5*deg_limit;
            add_deg = 180-total_deg;

            x = x + 10*10;
            x = x + 4.5*10;
            if(deg_limit <= 18){
                x = x + df_45;
            }
            x = x + 4.5*df_45+20;

            y = y - 10*df_45 - 10;

            y = y - df_45;
            y = y - 4.5*deg_limit+1;
            if(deg_limit < 12){
                x = x - 10;
            }


            deg = add_deg;
        }

    }else if(deg_mode == 90){

        x = x + 400 / 2; //taco / 2
        x = x + 20 / 2; //bola / 2
        y = y - 400 / 2; //taco / 2
        y = y + 20 / 2; //bola / 2
        x = x + 10;
        if(deg_type == 45){

            resize_y -= 10;
            deg_limit = mode_px - resize_y;

            total_deg = 4.5*deg_limit;
            add_deg = 90-total_deg;

            y = y - 10*deg_limit;
            y = y - 4.5*deg_limit;

            y = y - deg_limit;

            if(deg_limit > 2){
                if(deg_limit < 8){
                    x = x + 10;
                }
                x = x - 4.5*deg_limit;
                x = x - deg_limit;

            }

            deg = add_deg;

        }else if(deg_type == 0){

            float df_45;

            df_45 = mode_px - resize_x; //ajuste graus 45 90
            deg_limit = mode_px - resize_x; //total graus 90
            deg_limit = deg_limit + 10; //incrementa 10 + proximos degs total 20 deg_limit max
            total_deg = 4.5*deg_limit; //total degs atual
            add_deg = 90-total_deg;

            //start x y in 45 deg
            //y = y - 10*9;
            y = y - 4.5*10;
            x = x - 4.5*10;
            //end x y in 45 deg
            //y = y - 4.5*df_45;
            y = y - 10*deg_limit;

            if(deg_limit > 15){
                //y = y - 10*10;
                y = y + 4.5*df_45;
                if(deg_limit <= 20){
                    y = y - 20;
                }
            }
            x = x - 4.5*df_45;
            x = x - 10*df_45;
            x = x - df_45;
            x = x - 10;
            deg = add_deg;

            /*x = x - 4.5*deg_limit;
            y = y - 10*deg_limit;
            deg_limit = deg_limit - 10;
            x = x - 10*deg_limit;
            y = y - total_deg;*/
        }

    }else if(deg_mode == 0){

        x = x + 20 / 2; //bola / 2
        y = y - 400 / 2;
        y = y - 200;
        y = y - 10;
        y = y + 20 / 2; //bola / 2
        if(deg_type == -45){
            resize_x -= 10;
            deg_limit = mode_px - resize_x;
            total_deg = 4.5*deg_limit;
            add_deg = total_deg;

            x = x - 10*deg_limit;
            x = x - 4.5*deg_limit;
            x = x - deg_limit;
            x = x -4.5;
            if(deg_limit > 3){
                y = y + 4.5*deg_limit;
                if(deg_limit > 8){
                    y = y + 10;
                }
            }
            if(deg_limit > 9){
                y = y + 4.5;
                x = x + 3;
            }
            deg = -add_deg;
        }else if(deg_type == -90){

            float df_45;
            //resize_y = resize_y - 10;
            deg_limit = resize_y - mode_px;
            df_45 = resize_y - mode_px;
            deg_limit = deg_limit + 10;
            total_deg = 4.5*deg_limit;
            add_deg = total_deg;

            x = x - 10*10;
            x = x - 4.5*10;
            x = x - 10;
            x = x - 4.5;
            y = y + 4.5;
            x = x - df_45;
            x = x - 4.5*df_45;

            y = y + 4.5*deg_limit;
            y = y + 10*df_45;
            y = y + 4.5;
            y = y + df_45;
            if(df_45 == 5){
                y = y-10;
            }
            deg = -add_deg;
        }
    }
    //end div taco / 2 && bola / 20 -> meio


    SDL_Rect image_taco_rect;
	image_taco_rect.w = 6;
	image_taco_rect.h = 400;
	image_taco_rect.x = x;
	image_taco_rect.y = y;
	SDL_RendererFlip flip = SDL_FLIP_VERTICAL;
	SDL_RenderCopyEx(rendT, texture_taco, NULL, &image_taco_rect, deg, NULL, flip);
    SDL_DestroyTexture(texture_taco);
}

void rendFor(SDL_Renderer *rendForca, int f)
{
	SDL_SetRenderDrawColor(rendForca, 255, 255, 255, 1);

	int forca = 0, conty, y = 455, add_b = 5;

	if(f > 0){
		for (forca = 0; forca < f; forca++)
		{
			y += add_b;
			SDL_Rect f_rect;

			f_rect.w = 30;
			f_rect.h = 7;
			f_rect.x = 810;
			f_rect.y = y;

			SDL_RenderDrawRect(rendForca, &f_rect);
			SDL_RenderFillRect(rendForca, &f_rect);

		}
	}
}

void playJogada(SDL_Renderer *rendPlay, int x, int y, int deg_cont)
{
	SDL_Surface *image_branca = IMG_Load("assets/images/bm.png");

	SDL_Texture *texture_play = SDL_CreateTextureFromSurface(rendPlay, image_branca);
	SDL_FreeSurface(image_branca);

	SDL_Rect image_branca_rect;

	image_branca_rect.w = 20;
	image_branca_rect.h = 20;
	image_branca_rect.x = x;
	image_branca_rect.y = y;
	SDL_RenderCopy(rendPlay, texture_play, NULL, &image_branca_rect);
	SDL_DestroyTexture(texture_play);
}


void rendMiraDest(SDL_Renderer *rendDest, float mouseX, float mouseY){


    SDL_Surface *image_Dest = IMG_Load("assets/images/bm_dest.png");

	SDL_Texture *texture_mira = SDL_CreateTextureFromSurface(rendDest, image_Dest);
	SDL_FreeSurface(image_Dest);

	SDL_Rect image_Dest_rect;

	image_Dest_rect.w = 20;
	image_Dest_rect.h = 20;
	image_Dest_rect.x = mouseX;
	image_Dest_rect.y = mouseY;
	SDL_RenderCopy(rendDest, texture_mira, NULL, &image_Dest_rect);
    SDL_DestroyTexture(texture_mira);
}
